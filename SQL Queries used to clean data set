---Cleaning Data in SQL



---Select the database and the table
Select *
From Portfolioproject.dbo.Nashville_Housing



---Standardize the date format
Select SaleDate3, CONVERT(Date, SaleDate) 
From Portfolioproject.dbo.Nashville_Housing



---Populate Property Address
Select PropertyAddress
From Portfolioproject.dbo.Nashville_Housing
order by ParcelID


Select a.ParcelID, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
From Portfolioproject.dbo.Nashville_Housing a
JOIN Portfolioproject.dbo.Nashville_Housing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null


Update a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
From Portfolioproject.dbo.Nashville_Housing a
JOIN Portfolioproject.dbo.Nashville_Housing b
	on a.ParcelID = b.ParcelID
	AND a.[UniqueID ] <> b.[UniqueID ]
Where a.PropertyAddress is null




---Breakdown Address into Individual Columns (Address, City, State)
Select PropertyAddress
From Portfolioproject.dbo.Nashville_Housing


SELECT
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 ) as Address
, SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) +1 , LEN(PropertyAddress)) as City

FROM Portfolioproject.dbo.Nashville_Housing


ALTER TABLE Nashville_Housing
Add PropertySplitAddress Nvarchar(255);

Update Nashville_Housing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress) -1 )


ALTER TABLE Nashville_Housing
Add PropertySplitCity Nvarchar(255);

Update Nashville_Housing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress) + 1 , LEN(PropertyAddress))



---Breakdown Owner Address


SELECT *
FROM Portfolioproject.dbo.Nashville_Housing



SELECT OwnerAddress
FROM Portfolioproject.dbo.Nashville_Housing


SELECT 
PARSENAME(REPLACE(Owneraddress, ',', ',') , 3)
, PARSENAME(REPLACE(Owneraddress, ',', ',') , 2)
, PARSENAME(REPLACE(Owneraddress, ',', ',') , 1)
FROM Portfolioproject.dbo.Nashville_Housing




-- Change Y and N to Yes and No in "Sold as Vacant" field


Select Distinct(SoldAsVacant), Count(SoldAsVacant)
From PortfolioProject.dbo.Nashville_Housing
Group by SoldAsVacant
order by 2




Select SoldAsVacant
, CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END
From PortfolioProject.dbo.Nashville_Housing


Update Nashville_Housing
SET SoldAsVacant = CASE When SoldAsVacant = 'Y' THEN 'Yes'
	   When SoldAsVacant = 'N' THEN 'No'
	   ELSE SoldAsVacant
	   END



-- Remove Duplicates

WITH RowNumCTE AS(
Select *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY
					UniqueID
					) row_num

From PortfolioProject.dbo.Nashville_Housing
--order by ParcelID
)
Select *
From RowNumCTE
Where row_num > 1
Order by PropertyAddress



Select *
From PortfolioProject.dbo.Nashville_Housing



-- Delete Unused Columns



Select *
From PortfolioProject.dbo.Nashville_Housing


ALTER TABLE PortfolioProject.dbo.Nashville_Housing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate
